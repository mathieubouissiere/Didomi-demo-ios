#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.0 effective-4.2 (swiftlang-1001.0.69.5 clang-1001.0.46.3)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Didomi",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

SWIFT_CLASS("_TtC6Didomi17ConsentBannerView")
@interface ConsentBannerView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)updateConstraints;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class NSBundle;

SWIFT_CLASS("_TtC6Didomi27ConsentBannerViewController")
@interface ConsentBannerViewController : UIViewController
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC6Didomi16ConsentPopupView")
@interface ConsentPopupView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)updateConstraints;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC6Didomi26ConsentPopupViewController")
@interface ConsentPopupViewController : UIViewController
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)viewDidLayoutSubviews;
- (void)loadView;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

/// Consent status to a vendor or purpose.
typedef SWIFT_ENUM(NSInteger, ConsentStatus, closed) {
  ConsentStatusEnable = 0,
  ConsentStatusDisable = 1,
  ConsentStatusUnknown = 2,
};

@class DDMEventListener;

SWIFT_CLASS("_TtC6Didomi6Didomi")
@interface Didomi : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) Didomi * _Nonnull shared;)
+ (Didomi * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(Didomi * _Nonnull)value;
/// We need to be able to call the initialize method after the singleton has been created.
/// \param apiKey api key string used to initialize the Didomi SDK.
///
/// \param localConfigurationPath The path to your local config file. Defaults to didomi_config.json if nil.
///
/// \param remoteConfigurationURL The URL to a remote configuration file to load during initialization. This parameter is not used yet. Set it to nil for now.
///
/// \param providerId Your provider ID (if any).
///
///
/// returns:
/// An instance of Didomi class.
- (void)initializeWithApiKey:(NSString * _Nonnull)apiKey localConfigurationPath:(NSString * _Nullable)localConfigurationPath remoteConfigurationURL:(NSString * _Nullable)remoteConfigurationURL providerId:(NSString * _Nullable)providerId disableDidomiRemoteConfig:(BOOL)disableDidomiRemoteConfig;
/// Set the user consent status.
/// \param enabledPurposeIds set containing <em>enabled purpose ids</em>
///
/// \param disabledPurposeIds set containing <em>disabled purpose ids</em>
///
/// \param enabledVendorIds set containing <em>enabled vendor ids</em>
///
/// \param disabledVendorIds set containing <em>disabled purpose ids</em>
///
///
/// returns:
/// <em>true</em> if consent status has been updated, <em>false</em> otherwise.
- (BOOL)setUserConsentStatusWithEnabledPurposeIds:(NSSet<NSString *> * _Nonnull)enabledPurposeIds disabledPurposeIds:(NSSet<NSString *> * _Nonnull)disabledPurposeIds enabledVendorIds:(NSSet<NSString *> * _Nonnull)enabledVendorIds disabledVendorIds:(NSSet<NSString *> * _Nonnull)disabledVendorIds SWIFT_WARN_UNUSED_RESULT;
/// Determine if consent is required for the user. The rules are (OR):
/// <ul>
///   <li>
///     The user country is in the EU.
///   </li>
///   <li>
///     The company is from the EU.
///   </li>
///   <li>
///     The user country is unknown and the app has chosen to collect consent when unknown.
///   </li>
/// </ul>
///
/// returns:
/// <em>true</em> if consent is required, <em>false</em> if it is not required.
- (BOOL)isConsentRequired SWIFT_WARN_UNUSED_RESULT;
/// Determine if consent information is available for all purposes and vendors that are required
///
/// returns:
/// <em>true</em> if consent is required and consent information is available, <em>false</em> otherwise.
- (BOOL)isUserConsentStatusPartial SWIFT_WARN_UNUSED_RESULT;
/// Get the user consent status for a specific purpose
/// \param purposeId The purpose ID to check consent for
///
///
/// returns:
/// The user consent status for the specified purpose
- (enum ConsentStatus)getUserConsentStatusForPurposeWithPurposeId:(NSString * _Nonnull)purposeId SWIFT_WARN_UNUSED_RESULT;
/// Get the user consent status for a specific vendor
/// \param vendorId The vendor ID to check consent for
///
///
/// returns:
/// The user consent status for the specified vendor
- (enum ConsentStatus)getUserConsentStatusForVendorWithVendorId:(NSString * _Nonnull)vendorId SWIFT_WARN_UNUSED_RESULT;
/// Get the user consent status for a specific vendor and all its purposes
/// \param vendorId The ID of the vendor
///
///
/// returns:
/// The user consent status corresponding to the specified vendor and all its required purposes
- (enum ConsentStatus)getUserConsentStatusForVendorAndRequiredPurposesWithVendorId:(NSString * _Nonnull)vendorId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setUserAgreeToAll;
- (BOOL)setUserDisagreeToAll;
/// Provide a function that needs to be called once the SDK is ready
/// Automatically call the function if the SDK is already ready (that’s why this is not a standard event)
- (void)onReadyWithCallback:(void (^ _Nonnull)(void))callback;
/// Remove all consents for the user
- (void)reset;
/// Get the configured purpose IDs
/// @return
- (NSSet<NSString *> * _Nonnull)getRequiredPurposeIds SWIFT_WARN_UNUSED_RESULT;
/// Get the configured vendor IDs
/// @return
- (NSSet<NSString *> * _Nonnull)getRequiredVendorIds SWIFT_WARN_UNUSED_RESULT;
/// Add an event listener
/// \param listener 
///
- (void)addEventListenerWithListener:(DDMEventListener * _Nonnull)listener;
/// Is the Didomi SDK ready?
- (BOOL)isReady SWIFT_WARN_UNUSED_RESULT;
/// Method used to get a set of enabled purpose IDs.
///
/// returns:
/// set that contains the IDs of enabled purposes.
- (NSSet<NSString *> * _Nonnull)getEnabledPurposeIds SWIFT_WARN_UNUSED_RESULT;
/// Method used to get a set of disabled purpose IDs.
///
/// returns:
/// set that contains the IDs of disabled purposes.
- (NSSet<NSString *> * _Nonnull)getDisabledPurposeIds SWIFT_WARN_UNUSED_RESULT;
/// Method used to get a set of enabled vendor IDs.
///
/// returns:
/// set that contains the IDs of enabled vendors.
- (NSSet<NSString *> * _Nonnull)getEnabledVendorIds SWIFT_WARN_UNUSED_RESULT;
/// Method used to get a set of disabled vendor IDs.
///
/// returns:
/// set that contains the IDs of disabled vendors.
- (NSSet<NSString *> * _Nonnull)getDisabledVendorIds SWIFT_WARN_UNUSED_RESULT;
/// Get JavaScript to embed into a WebView to pass the consent status from the app
/// to the Didomi Web SDK embedded into the WebView
/// Inject the returned JavaScript into a WebView
/// \param extra Extra JavaScript to inject in the returned code
///
///
/// returns:
/// JavaScript code to inject in a WebView
- (NSString * _Nonnull)getJavaScriptForWebViewWithExtra:(NSString * _Nonnull)extra SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface Didomi (SWIFT_EXTENSION(Didomi))
/// Provide the objects required to display UI elements
- (void)setupUIWithContainerController:(UIViewController * _Nonnull)containerController;
/// Force show the consent notice without checking if consent is required
/// Important: Do not keep a local reference to the View Controller itself as that could create a memory leak
- (void)forceShowNotice;
/// Show the consent notice (if required, not disabled in the config and not already displayed)
- (void)showNotice;
/// Hide the notice if it is currently displayed
- (void)hideNotice;
/// Check if the consent notice is currently displayed
/// @return
- (BOOL)isNoticeVisible SWIFT_WARN_UNUSED_RESULT;
/// Check if the consent should be collected depending on if we have any consents or if we have some consents but the number of days before displaying the notice again has not expired yet
///
/// returns:
/// A boolean depending if the consent should be collected or not
- (BOOL)shouldConsentBeCollected SWIFT_WARN_UNUSED_RESULT;
/// Show the preferences popup for purposes
- (void)showPreferences;
/// Hide the preferences popup for purposes
- (void)hidePreferences;
/// @return
- (BOOL)isPreferencesVisible SWIFT_WARN_UNUSED_RESULT;
@end

enum DDMEventType : NSInteger;

/// Class used as a listener for internal events occurred in the SDK.
SWIFT_CLASS_NAMED("EventListener")
@interface DDMEventListener : NSObject
/// Closures used to execute code when the different events are triggered.
@property (nonatomic, copy) void (^ _Nonnull onConsentChanged)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onHideNotice)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onReady)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onShowNotice)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onNoticeClickAgree)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onNoticeClickMoreInfo)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickAgreeToAll)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickDisagreeToAll)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickPurposeAgree)(enum DDMEventType, NSString * _Nullable);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickPurposeDisagree)(enum DDMEventType, NSString * _Nullable);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickViewVendors)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickSaveChoices)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickVendorAgree)(enum DDMEventType, NSString * _Nullable);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickVendorDisagree)(enum DDMEventType, NSString * _Nullable);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickVendorSaveChoices)(enum DDMEventType);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum used to define the different type of internal events that can be triggered from the SDK.
typedef SWIFT_ENUM_NAMED(NSInteger, DDMEventType, "EventType", closed) {
  DDMEventTypeConsentChanged = 0,
  DDMEventTypeHideNotice = 1,
  DDMEventTypeReady = 2,
  DDMEventTypeShowNotice = 3,
  DDMEventTypeNoticeClickAgree = 4,
  DDMEventTypeNoticeClickMoreInfo = 5,
  DDMEventTypePreferencesClickAgreeToAll = 6,
  DDMEventTypePreferencesClickDisagreeToAll = 7,
  DDMEventTypePreferencesClickPurposeAgree = 8,
  DDMEventTypePreferencesClickPurposeDisagree = 9,
  DDMEventTypePreferencesClickViewVendors = 10,
  DDMEventTypePreferencesClickSaveChoices = 11,
  DDMEventTypePreferencesClickVendorAgree = 12,
  DDMEventTypePreferencesClickVendorDisagree = 13,
  DDMEventTypePreferencesClickVendorSaveChoices = 14,
};















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.0 effective-4.2 (swiftlang-1001.0.69.5 clang-1001.0.46.3)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Didomi",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSCoder;

SWIFT_CLASS("_TtC6Didomi17ConsentBannerView")
@interface ConsentBannerView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)updateConstraints;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class NSBundle;

SWIFT_CLASS("_TtC6Didomi27ConsentBannerViewController")
@interface ConsentBannerViewController : UIViewController
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC6Didomi16ConsentPopupView")
@interface ConsentPopupView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)updateConstraints;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC6Didomi26ConsentPopupViewController")
@interface ConsentPopupViewController : UIViewController
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)viewDidLayoutSubviews;
- (void)loadView;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

/// Consent status to a vendor or purpose.
typedef SWIFT_ENUM(NSInteger, ConsentStatus, closed) {
  ConsentStatusEnable = 0,
  ConsentStatusDisable = 1,
  ConsentStatusUnknown = 2,
};

@class DDMEventListener;

SWIFT_CLASS("_TtC6Didomi6Didomi")
@interface Didomi : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) Didomi * _Nonnull shared;)
+ (Didomi * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(Didomi * _Nonnull)value;
/// We need to be able to call the initialize method after the singleton has been created.
/// \param apiKey api key string used to initialize the Didomi SDK.
///
/// \param localConfigurationPath The path to your local config file. Defaults to didomi_config.json if nil.
///
/// \param remoteConfigurationURL The URL to a remote configuration file to load during initialization. This parameter is not used yet. Set it to nil for now.
///
/// \param providerId Your provider ID (if any).
///
///
/// returns:
/// An instance of Didomi class.
- (void)initializeWithApiKey:(NSString * _Nonnull)apiKey localConfigurationPath:(NSString * _Nullable)localConfigurationPath remoteConfigurationURL:(NSString * _Nullable)remoteConfigurationURL providerId:(NSString * _Nullable)providerId disableDidomiRemoteConfig:(BOOL)disableDidomiRemoteConfig;
/// Set the user consent status.
/// \param enabledPurposeIds set containing <em>enabled purpose ids</em>
///
/// \param disabledPurposeIds set containing <em>disabled purpose ids</em>
///
/// \param enabledVendorIds set containing <em>enabled vendor ids</em>
///
/// \param disabledVendorIds set containing <em>disabled purpose ids</em>
///
///
/// returns:
/// <em>true</em> if consent status has been updated, <em>false</em> otherwise.
- (BOOL)setUserConsentStatusWithEnabledPurposeIds:(NSSet<NSString *> * _Nonnull)enabledPurposeIds disabledPurposeIds:(NSSet<NSString *> * _Nonnull)disabledPurposeIds enabledVendorIds:(NSSet<NSString *> * _Nonnull)enabledVendorIds disabledVendorIds:(NSSet<NSString *> * _Nonnull)disabledVendorIds SWIFT_WARN_UNUSED_RESULT;
/// Determine if consent is required for the user. The rules are (OR):
/// <ul>
///   <li>
///     The user country is in the EU.
///   </li>
///   <li>
///     The company is from the EU.
///   </li>
///   <li>
///     The user country is unknown and the app has chosen to collect consent when unknown.
///   </li>
/// </ul>
///
/// returns:
/// <em>true</em> if consent is required, <em>false</em> if it is not required.
- (BOOL)isConsentRequired SWIFT_WARN_UNUSED_RESULT;
/// Determine if consent information is available for all purposes and vendors that are required
///
/// returns:
/// <em>true</em> if consent is required and consent information is available, <em>false</em> otherwise.
- (BOOL)isUserConsentStatusPartial SWIFT_WARN_UNUSED_RESULT;
/// Get the user consent status for a specific purpose
/// \param purposeId The purpose ID to check consent for
///
///
/// returns:
/// The user consent status for the specified purpose
- (enum ConsentStatus)getUserConsentStatusForPurposeWithPurposeId:(NSString * _Nonnull)purposeId SWIFT_WARN_UNUSED_RESULT;
/// Get the user consent status for a specific vendor
/// \param vendorId The vendor ID to check consent for
///
///
/// returns:
/// The user consent status for the specified vendor
- (enum ConsentStatus)getUserConsentStatusForVendorWithVendorId:(NSString * _Nonnull)vendorId SWIFT_WARN_UNUSED_RESULT;
/// Get the user consent status for a specific vendor and all its purposes
/// \param vendorId The ID of the vendor
///
///
/// returns:
/// The user consent status corresponding to the specified vendor and all its required purposes
- (enum ConsentStatus)getUserConsentStatusForVendorAndRequiredPurposesWithVendorId:(NSString * _Nonnull)vendorId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setUserAgreeToAll;
- (BOOL)setUserDisagreeToAll;
/// Provide a function that needs to be called once the SDK is ready
/// Automatically call the function if the SDK is already ready (that’s why this is not a standard event)
- (void)onReadyWithCallback:(void (^ _Nonnull)(void))callback;
/// Remove all consents for the user
- (void)reset;
/// Get the configured purpose IDs
/// @return
- (NSSet<NSString *> * _Nonnull)getRequiredPurposeIds SWIFT_WARN_UNUSED_RESULT;
/// Get the configured vendor IDs
/// @return
- (NSSet<NSString *> * _Nonnull)getRequiredVendorIds SWIFT_WARN_UNUSED_RESULT;
/// Add an event listener
/// \param listener 
///
- (void)addEventListenerWithListener:(DDMEventListener * _Nonnull)listener;
/// Is the Didomi SDK ready?
- (BOOL)isReady SWIFT_WARN_UNUSED_RESULT;
/// Method used to get a set of enabled purpose IDs.
///
/// returns:
/// set that contains the IDs of enabled purposes.
- (NSSet<NSString *> * _Nonnull)getEnabledPurposeIds SWIFT_WARN_UNUSED_RESULT;
/// Method used to get a set of disabled purpose IDs.
///
/// returns:
/// set that contains the IDs of disabled purposes.
- (NSSet<NSString *> * _Nonnull)getDisabledPurposeIds SWIFT_WARN_UNUSED_RESULT;
/// Method used to get a set of enabled vendor IDs.
///
/// returns:
/// set that contains the IDs of enabled vendors.
- (NSSet<NSString *> * _Nonnull)getEnabledVendorIds SWIFT_WARN_UNUSED_RESULT;
/// Method used to get a set of disabled vendor IDs.
///
/// returns:
/// set that contains the IDs of disabled vendors.
- (NSSet<NSString *> * _Nonnull)getDisabledVendorIds SWIFT_WARN_UNUSED_RESULT;
/// Get JavaScript to embed into a WebView to pass the consent status from the app
/// to the Didomi Web SDK embedded into the WebView
/// Inject the returned JavaScript into a WebView
/// \param extra Extra JavaScript to inject in the returned code
///
///
/// returns:
/// JavaScript code to inject in a WebView
- (NSString * _Nonnull)getJavaScriptForWebViewWithExtra:(NSString * _Nonnull)extra SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface Didomi (SWIFT_EXTENSION(Didomi))
/// Provide the objects required to display UI elements
- (void)setupUIWithContainerController:(UIViewController * _Nonnull)containerController;
/// Force show the consent notice without checking if consent is required
/// Important: Do not keep a local reference to the View Controller itself as that could create a memory leak
- (void)forceShowNotice;
/// Show the consent notice (if required, not disabled in the config and not already displayed)
- (void)showNotice;
/// Hide the notice if it is currently displayed
- (void)hideNotice;
/// Check if the consent notice is currently displayed
/// @return
- (BOOL)isNoticeVisible SWIFT_WARN_UNUSED_RESULT;
/// Check if the consent should be collected depending on if we have any consents or if we have some consents but the number of days before displaying the notice again has not expired yet
///
/// returns:
/// A boolean depending if the consent should be collected or not
- (BOOL)shouldConsentBeCollected SWIFT_WARN_UNUSED_RESULT;
/// Show the preferences popup for purposes
- (void)showPreferences;
/// Hide the preferences popup for purposes
- (void)hidePreferences;
/// @return
- (BOOL)isPreferencesVisible SWIFT_WARN_UNUSED_RESULT;
@end

enum DDMEventType : NSInteger;

/// Class used as a listener for internal events occurred in the SDK.
SWIFT_CLASS_NAMED("EventListener")
@interface DDMEventListener : NSObject
/// Closures used to execute code when the different events are triggered.
@property (nonatomic, copy) void (^ _Nonnull onConsentChanged)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onHideNotice)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onReady)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onShowNotice)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onNoticeClickAgree)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onNoticeClickMoreInfo)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickAgreeToAll)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickDisagreeToAll)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickPurposeAgree)(enum DDMEventType, NSString * _Nullable);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickPurposeDisagree)(enum DDMEventType, NSString * _Nullable);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickViewVendors)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickSaveChoices)(enum DDMEventType);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickVendorAgree)(enum DDMEventType, NSString * _Nullable);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickVendorDisagree)(enum DDMEventType, NSString * _Nullable);
@property (nonatomic, copy) void (^ _Nonnull onPreferencesClickVendorSaveChoices)(enum DDMEventType);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum used to define the different type of internal events that can be triggered from the SDK.
typedef SWIFT_ENUM_NAMED(NSInteger, DDMEventType, "EventType", closed) {
  DDMEventTypeConsentChanged = 0,
  DDMEventTypeHideNotice = 1,
  DDMEventTypeReady = 2,
  DDMEventTypeShowNotice = 3,
  DDMEventTypeNoticeClickAgree = 4,
  DDMEventTypeNoticeClickMoreInfo = 5,
  DDMEventTypePreferencesClickAgreeToAll = 6,
  DDMEventTypePreferencesClickDisagreeToAll = 7,
  DDMEventTypePreferencesClickPurposeAgree = 8,
  DDMEventTypePreferencesClickPurposeDisagree = 9,
  DDMEventTypePreferencesClickViewVendors = 10,
  DDMEventTypePreferencesClickSaveChoices = 11,
  DDMEventTypePreferencesClickVendorAgree = 12,
  DDMEventTypePreferencesClickVendorDisagree = 13,
  DDMEventTypePreferencesClickVendorSaveChoices = 14,
};















#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
